---
- hosts: all
  gather_facts: no
  become: true
  become_user: root
  become_method: sudo

  tasks:

  - name: Define a KVM network
    virt_net:
      command: define
      name: "{{ KvmNetworkName }}"
      xml: '{{ lookup("template", "{{ KvmNetworkTemplateFile }}") }}'
    ignore_errors: yes

  - name: create a KVM Network
    virt_net:
      command: create
      name: "{{ KvmNetworkName }}"
    ignore_errors: yes

  - name: Autostart the KVM Network
    virt_net:
      autostart: yes
      name: "{{ KvmNetworkName }}"
    ignore_errors: yes

# Bash commands:
#     virsh net-define /tmp/network.xml
#     virsh net-autostart "{{ KvmNetworkName }}"
#     virsh net-start "{{ KvmNetworkName }}"

  - name: Generate avi_meta_controller.yml
    template:
      src: "{{ AviControllerIpFile }}"
      dest: avi_meta_controller.yml
    delegate_to: 127.0.0.1

  - name: Generate iso avi_meta_controller.yml file
    command: genisoimage -o config.iso avi_meta_controller.yml
    delegate_to: 127.0.0.1

  - name: Transfer iso file to the KVM host
    copy:
      src: config.iso
      dest: ./config.iso


  - name: Transfer Avi Qcow2 Image to the KVM host
    copy:
      src: "{{ AviBinFile }}"
      dest: ./{{ AviBinFileBaseName }}
      force: no

  - name: define the Avi Controller
    virt:
        name: "{{ AviInstanceName }}"
        command: define
        xml: '{{ lookup("template", "{{ KvmDomainTemplateFile }}") }}'
    ignore_errors: yes

  - name: start the Avi Controller
    virt:
        name: "{{ AviInstanceName }}"
        state: running
    ignore_errors: yes


  - name: Wait for port 443 to become open on Avi Controller
    wait_for:
      host: "{{ AviControllerIp }}"
      port: 443
      delay: 10

  - name: Display Post Message Installation
    debug:
      msg: "The Avi Controller is available at https://{{ AviControllerIp }}"
